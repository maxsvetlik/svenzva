#!/usr/bin/env python
PACKAGE = "svenzva_drivers"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

acceleration = gen.add_group("acceleration")
velocity = gen.add_group("velocity")
pid = gen.add_group("pid")
pid_j1 = pid.add_group("pid_j1")
pid_j2 = pid.add_group("pid_j2")
pid_j3 = pid.add_group("pid_j3")
pid_j4 = pid.add_group("pid_j4")
pid_j5 = pid.add_group("pid_j5")
pid_j6 = pid.add_group("pid_j6")
pid_j7 = pid.add_group("pid_j7")


gen.add("enable_parameter_control",   bool_t,   0, "Enable PID and profile parameter control. Svenzva Robotics LLC is not responsible for damages to robots with egregious parameter values. Incorrectly balanced control loops can cause damage to the robot and its environment, and cause motors to oscillate rapidly. Please consult Dynamixel 2.0 firmware documentation and study the control loops, and how these parameters affect them. Proceed at your own risk.",  False)

acceleration.add("joint_acc_limit", int_t, 1, "Uniform joint acceleration profile, scaled for all motors. Each unit is 214.577 Rev/min2", 6, 0, 100)

velocity.add("joint_vel_limit", int_t, 1<<1, "Uniform joint velocity profile, scaled for all motors. Each unit is 0.229 RPM", 16, 0, 100)

# Joint 1 PID
pid_j1.add("joint_1_P", int_t, 1<<2, "Motor 1 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1200, 0, 5000)
pid_j1.add("joint_1_I", int_t, 1<<2, "Motor 1 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j1.add("joint_1_D", int_t, 1<<2, "Motor 1 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 10000, 0, 16000)
pid_j1.add("joint_1_Feedforward1_velocity", int_t, 1<<2, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1000, 0, 16000)
pid_j1.add("joint_1_Feedforward2_acceleration", int_t, 1<<2, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1000, 0, 16000)

pid_j1.add("joint_1_velocity_P", int_t, 1<<2, "Motor 1 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j1.add("joint_1_velocity_I", int_t, 1<<2, "Motor 1 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)

# Joint 2 PID
pid_j2.add("joint_2_P", int_t, 1<<3, "Motor 2 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 3000, 0, 5000)
pid_j2.add("joint_2_I", int_t, 1<<3, "Motor 2 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j2.add("joint_2_D", int_t, 1<<3, "Motor 2 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 12000, 0, 16000)
pid_j2.add("joint_2_Feedforward1_velocity", int_t, 1<<3, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1000, 0, 16000)
pid_j2.add("joint_2_Feedforward2_acceleration", int_t, 1<<3, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1000, 0, 16000)

pid_j2.add("joint_2_velocity_P", int_t, 1<<2, "Motor 2 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j2.add("joint_2_velocity_I", int_t, 1<<2, "Motor 2 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)


# Joint 3 PID
pid_j3.add("joint_3_P", int_t, 1<<4, "Motor 3 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 3000, 0, 5000)
pid_j3.add("joint_3_I", int_t, 1<<4, "Motor 3 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j3.add("joint_3_D", int_t, 1<<4, "Motor 3 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 12000, 0, 16000)
pid_j3.add("joint_3_Feedforward1_velocity", int_t, 1<<4, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1000, 0, 16000)
pid_j3.add("joint_3_Feedforward2_acceleration", int_t, 1<<4, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1000, 0, 16000)

pid_j3.add("joint_3_velocity_P", int_t, 1<<2, "Motor 3 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j3.add("joint_3_velocity_I", int_t, 1<<2, "Motor 3 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)


# Joint 4 PID
pid_j4.add("joint_4_P", int_t, 1<<5, "Motor 4 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1600, 0, 5000)
pid_j4.add("joint_4_I", int_t, 1<<5, "Motor 4 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j4.add("joint_4_D", int_t, 1<<5, "Motor 4 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 10000, 0, 16000)
pid_j4.add("joint_4_Feedforward1_velocity", int_t, 1<<5, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 16000)
pid_j4.add("joint_4_Feedforward2_acceleration", int_t, 1<<5, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 16000)

pid_j4.add("joint_4_velocity_P", int_t, 1<<2, "Motor 4 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j4.add("joint_4_velocity_I", int_t, 1<<2, "Motor 4 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)


# Joint 5 PID
pid_j5.add("joint_5_P", int_t, 1<<6, "Motor 5 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1200, 0, 5000)
pid_j5.add("joint_5_I", int_t, 1<<6, "Motor 5 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j5.add("joint_5_D", int_t, 1<<6, "Motor 5 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 10000, 0, 16000)
pid_j5.add("joint_5_Feedforward1_velocity", int_t, 1<<6, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 16000)
pid_j5.add("joint_5_Feedforward2_acceleration", int_t, 1<<6, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 800, 0, 16000)

pid_j5.add("joint_5_velocity_P", int_t, 1<<2, "Motor 5 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j5.add("joint_5_velocity_I", int_t, 1<<2, "Motor 5 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)


# Joint 6 PID
pid_j6.add("joint_6_P", int_t, 1<<7, "Motor 6 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1200, 0, 5000)
pid_j6.add("joint_6_I", int_t, 1<<7, "Motor 6 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j6.add("joint_6_D", int_t, 1<<7, "Motor 6 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 8000, 0, 16000)
pid_j6.add("joint_6_Feedforward1_velocity", int_t, 1<<7, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 500, 0, 16000)
pid_j6.add("joint_6_Feedforward2_acceleration", int_t, 1<<7, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 500, 0, 16000)

pid_j6.add("joint_6_velocity_P", int_t, 1<<2, "Motor 6 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j6.add("joint_6_velocity_I", int_t, 1<<2, "Motor 6 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)


# Joint 7 PID
pid_j7.add("joint_7_P", int_t, 1<<8, "Motor 7 proportional gain. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 500, 0, 5000)
pid_j7.add("joint_7_I", int_t, 1<<8, "Motor 7 integral gain. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 5000)
pid_j7.add("joint_7_D", int_t, 1<<8, "Motor 7 dampening gain. Unit is value / 16. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 900, 0, 16000)
pid_j7.add("joint_7_Feedforward1_velocity", int_t, 1<<8, "Motor 1 feedforward velocity gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)
pid_j7.add("joint_7_Feedforward2_acceleration", int_t, 1<<8, "Motor 1 feedforward acceleration gain. Unit is value / 4. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 0, 0, 16000)

pid_j7.add("joint_7_velocity_P", int_t, 1<<2, "Motor 7 proportional gain for velocity control. Unit is value / 128. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 100, 0, 16000)
pid_j7.add("joint_7_velocity_I", int_t, 1<<2, "Motor 7 integral gain for velocity control. Unit is value / 65536. User is expected to consult the Dynamixel 2.0 firmware manual digram prior to changing this value. Full knowledge of control loop is expected.", 1920, 0, 16000)


exit(gen.generate(PACKAGE, "svenzva_drivers", "RevelFirmwareDynamic"))
